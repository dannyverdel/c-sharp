@page "/fetchdata"
@inject SampleDataAccess data

<PageTitle>Employee Directory</PageTitle>

<h1>Employee Directory</h1>

@if (FilteredEmployees is not null)
{
    <QuickGrid Items="@FilteredEmployees" ResizableColumns="true" Pagination="@pagination">
        <PropertyColumn Property="@(e => e.FirstName + " " + e.LastName)" Title="Name" Sortable="true" Class="employee-name" IsDefaultSort="SortDirection.Ascending">
            <ColumnOptions>
                <div class="search-box">
                    <input type="search" autofocus @bind="NameFilter" @bind:event="oninput" placeholder="Employee name..." />
                </div>
            </ColumnOptions>
        </PropertyColumn>
        <PropertyColumn Property="@(e => e.Age)" Sortable="true" />
    </QuickGrid>

    <Paginator Value="@pagination" />
}
else
{
    <p><em>Loading...</em></p>
}

@code {
    private IQueryable<EmployeeModel>? Employees;
    private IQueryable<EmployeeModel>? FilteredEmployees => Employees?.Where(x => $"{x.FirstName} {x.LastName}".Contains(NameFilter, StringComparison.CurrentCultureIgnoreCase));
    private PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    private string NameFilter = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        List<EmployeeModel>? employees = await data.GetEmployeesCache();
        Employees = employees.AsQueryable();
    }
}

