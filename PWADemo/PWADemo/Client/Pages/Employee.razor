@page "/employee"
@page "/employee/{id:int}"
@inject IEmployeeService EmployeeService

@if (Id is null)
{
    <PageTitle>Create a new employee</PageTitle>
    <h3>Create a new employee</h3>
}
else
{
    <PageTitle>Edit @employee.Name</PageTitle>
    <h3>Edit @employee.Name</h3>
}

<EditForm Model="employee" OnSubmit="HandleSubmit">
    <div>
        <label for="name">Name</label>
        <InputText id="name" @bind-Value="@employee.Name" class="form-control"></InputText>
    </div>
    <div>
        <label for="email">Email</label>
        <InputText id="email" @bind-Value="@employee.Email" class="form-control"></InputText>
    </div>
    <div>
        <label for="phone">Phone</label>
        <InputText id="phone" @bind-Value="@employee.Phone" class="form-control"></InputText>
    </div>
    <br/>
    <button type="submit" class="btn btn-primary">@BtnText</button>
    <button type="button" class="btn btn-danger" @onclick="DeleteEmployee">Delete employee</button>
</EditForm>

@code {
    [Parameter]
    public int? Id { get; set; }
    public string BtnText = string.Empty;
    public PWADemo.Shared.Employee employee { get; set; } = new PWADemo.Shared.Employee();

    protected override async Task OnInitializedAsync()
    {
        BtnText = Id is null ? "Create new employee" : "Update employee";
        await EmployeeService.GetEmployees();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id is not null)
            employee = await EmployeeService.GetSingleEmployee((int)Id);
    }

    async Task HandleSubmit()
    {
        if (Id is null)
            await EmployeeService.CreateEmployee(employee);
        else
            await EmployeeService.UpdateEmployee(employee);
    }

    async Task DeleteEmployee() => await EmployeeService.DeleteEmployee(employee.Id);
}

